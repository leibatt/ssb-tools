#!/bin/bash
#
# setup-db
#
# A script for setting up a DB with MonetDB containing the SSB (Star-
# Schema Benchmark) schema, and generated its data set. It must be run
# after MonetDB itself has been properly installed as is available on
# the executable path.
# 
#################################################################################
# By Eyal Rozenberg <E.Rozenberg@cwi.nl>
##################################################################################
#
#

#------------------------------
# Helper functions

function usage {
	AUTHOR="Eyal Rozenberg"
	CONTACT_EMAIL="E.Rozenberg@cwi.nl"
	echo "Usage: $0 [OPTIONS...]"
	echo "Downloads, build and installs MonetDB and the dbgen utlilities; generates SSB"
	echo "data, creates a DB farm, creates a DB and loads the data there."
	echo 
	echo "Options:"
	echo "  -r, --recreate              If the SSB database exists, recreate it, dropping"
	echo "                              all existing data. (If this option is unset, the "
	echo "                              database must not already exist)"
	echo "  -s, --scale-factor FACTOR   The amount of test data to generate, in GB"
	echo "  -G, --use-generated         Use previously-generated table load files (in the"
	echo "                              data generation directory instead of re-generating"
	echo "                              them using the dbgen utility."
	echo "  -g, --dbgen-dir             Look for the SSB data generation utility in the"
	echo "                              specified directory."
	echo "  -l, --log-file FILENAME     Name of the file to log output into"
	echo "  -d, --db-name NAME          Name of the database holding SSB test data"
	echo "                              within the DB farm" 
	echo "  -f, --db-farm PATH          Filesystem path for the root directory of the DB farm"
	echo "                              with the generated DB"
	echo "  -p, --port NUMBER           Network port on the local host, which the server"
	echo "                              will related to the DB farm"
	echo "  -D, --data-gen-dir PATH     directory in which to generate the SSB table data"
	echo "  -k, --keep-raw-tables       Keep the raw data generated by the tool outside of"
	echo "                              the DBMS"
	echo 
	echo "For questions and details, contact $AUTHOR <$CONTACT_EMAIL> (or just read the source)."
}


function die {
	echo -e "$1" >&2   # error message to stderr 
	exit ${2:-1}  # default exit code is -1 but you can specify something else
}

function is_positive_int {
	[[ $1 =~ ^[0-9]+$ ]] && [[ ! $1 =~ ^0+$ ]]
}

# (monetdb's command-line utilities are not so great
# at reporting the status of things in machine-readable format)

function dbgen_is_valid {
	[[ -n $($dbgen_binary -h 2>&1 | head -1 | egrep "SSBM? \\(Star Schema Benchmark\\) Population Generator") ]]
}


#------------------------------

TODAY=$(date +%Y-%m-%d)

# Default parameter values here...

schema_creation_query_file="other_queries/create_schema_with_constraints.sql"
scale_factor=1
dbgen_dir="$(pwd)/dbgen"
data_generation_base_dir="$(pwd)"
data_generation_dir="${data_generation_base_dir}/dbgen-${TODAY}"
db_name="ssb-sf-$scale_factor"
log_file="${0}.log"
keep_raw_tables=
port=50000

#------------------------------
# Parse command line here
#
while [[ $# > 0 ]]; do
	option_key="$1"
	
	case $option_key in
	-v|--verbose)
	    be_verbose=1
	    ;;
	-r|--recreate)
	    recreate_db=1
	    ;;
	-s|--scale-factor|--sf)
		scale_factor="$2"
		is_positive_int $scale_factor || die "Invalid scale factor $scale_factor"
		shift # past argument
		;;
	-g|--dbgen-dir)
		raw_db_dir="$2"
		dbgen_dir=${raw_db_dir%%+(/)}
		dbgen_binary=$dbgen_dir/dbgen
		dbgen_dists_file=$dbgen_dir/dists.dss
		shift # past argument
		;;
	-G|--data-already-generated|--already-generated|--have-generated-data|--have-generated)
		already_generated=1
		;;
	-d|--dbname|--db-name|--database-name)
		db_name="$2"
		shift # past argument
		;;
	-l|--log-file)
		log_file="$2"
		shift # past argument
		;;
	-f|--farm|--db-farm|--dbfarm|--database-farm)
		db_farm="$2"
		shift # past argument
		;;
	-p|--port|--dbfarm-port)
		port="$2"
		shift # past argument
		is_positive_int $port || die "Invalid DB farm port $port"
		;;
	-D|--data-gen-dir|--data-generation-directory|--data-generation-dir|--gen-dir|--data-gen-directory)
		raw_data_generation_dir="$2"
		data_generation_dir=${raw_data_generation_dir%%/}
		shift # past argument
		;;
	-k|--keep-raw-tables|--keep-raw)
		keep_raw_tables=1
		;;
	*) # unknown option
		echo "Unknown command line option $option_key" 1>&2
		break
#		usage
#		exit -1
		;;
	esac
	shift # past argument or value
done
if [[ $# > 0 ]]; then
	usage
	exit -1
fi

if [[ -z "$keep_raw_tables" ]] && [[ -n "already_generated" ]]; then
	keep_raw_table=1	
fi

[[ -n "$db_farm" ]] || db_farm="$DB_FARM"
[[ -n "$db_farm" ]] || db_farm="$HOME/db_farms/monetdb"

#
#------------------------------

# This makes sure both the console and the log file get both stderr and stdout
exec >& >(tee $log_file)

# Derived non-user-controlled parameters

if [[ -z "$already_generated" ]]; then
	if [[ -z $dbgen_binary ]] || [[ -z $dbgen_dists_file ]] ; then
		if [[ -z $dbgen_dir ]]; then
			echo "Could not locate the SSB dbgen tool directory/binary & dists file" >&2
			echo "(you did not specify their location using -g)"
			exit -1
		fi
	fi
	[[ -n $dbgen_dists_file ]] || dbgen_dists_file=$dbgen_dir/dists.dss
	[[ -n $dbgen_binary ]] || dbgen_binary=$dbgen_dir/dbgen
	if [[ ! -r $dbgen_dists_file ]]; then
		echo "Cannot read dbgen dists file $dbgen_dists_file" >&2
		exit -1
	fi
	if [[ ! -f $dbgen_binary ]]; then
		if [[ ! -f $dbgen_dir/Makefile ]]; then
			[[ -f $dbgen_dir/CMakeLists.txt ]] || die "Missing CMakeLists.txt in the DBGEN directory $dbgen_dir - can't generate Makefile"
			pushd $dbgen_dir
			cmake .
			popd
		fi
		[[ -f $dbgen_dir/Makefile ]] || die "Could not find nor generate a Makefile in $dbgen_dir"
		make -C $dbgen_dir || die "Failed building the dbgen utility."
	fi
			
	if [[ ! -f $dbgen_binary ]]; then
		echo "Cannot find the dbgen data generation binary at $dbgen_binary. (Perhaps something went wrong with the build?)" >&2
		exit -1
	fi 
	if [[ ! -x $dbgen_binary ]]; then
		echo "The dbgen data generation binary at $dbgen_binary is not an executable file." >&2
		exit -1
	fi 
	dbgen_is_valid || die "Invalid SSB data generator binary $dbgen_binary"
fi

# Generate the SSB data

if [[ -z "$already_generated" ]] ; then
	[[ ! -d $data_generation_dir ]] || die "The intended data generation directory $data_generation_dir is already present; either remove it or set another directory name - picking up after generation is not supported right now."
	mkdir -p $data_generation_dir || die "Can't create staging directory $data_generation_dir for generating SSB data"
	pushd $data_generation_dir >/dev/null
	escaped_path_of_generation_dir=$(echo "$PWD" | sed 's/\//\\\//g')
	[[ "$be_verbose" ]] && dbgen_verbosity_option="-v"
	[[ "$be_verbose" ]] && echo "$dbgen_binary -v -b $dbgen_dists_file -s $scale_factor "
	# Unfortunately, for now, we need to generate each table separately.
	echo >&2 $dbgen_binary -b $dbgen_dists_file -s $scale_factor
	$dbgen_binary -b $dbgen_dists_file -s $scale_factor $dbgen_verbosity_option || die "Failed generating SSB data using $dbgen_binary with scale factor $scale_factor, at $data_generation_dir"
	popd >&/dev/null
else
	[[ -d $data_generation_dir ]] || die "Pre-generated data directory $data_generation_dir is missing"
fi

